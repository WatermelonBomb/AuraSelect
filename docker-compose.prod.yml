version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: auraselect_frontend_prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
      - NEXT_PUBLIC_ENV=production
      - NEXT_PUBLIC_ENABLE_DEV_TOOLS=false
      - NEXT_PUBLIC_ENABLE_QUICK_LOGIN=false
    depends_on:
      - backend
    networks:
      - auraselect_network
    restart: unless-stopped

  # Backend (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auraselect_backend_prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://auraselect:${POSTGRES_PASSWORD}@postgres:5432/auraselect_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${JWT_SECRET}
      - ALLOWED_HOSTS=http://localhost:3000,https://yourdomain.com
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - upload_data:/app/uploads
    networks:
      - auraselect_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auraselect_postgres_prod
    environment:
      - POSTGRES_DB=auraselect_db
      - POSTGRES_USER=auraselect
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - auraselect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auraselect -d auraselect_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auraselect_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - auraselect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: auraselect_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - auraselect_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local

networks:
  auraselect_network:
    driver: bridge